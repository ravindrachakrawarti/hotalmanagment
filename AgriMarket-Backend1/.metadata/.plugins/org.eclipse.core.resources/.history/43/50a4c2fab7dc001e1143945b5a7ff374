package React.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import React.Repository.UserRepository;
import React.exception.UserNotFoundException;
import React.model.User;

@RestController
@CrossOrigin("http://localhost:3000")
public class UserController {
	
	
	@Autowired
	private UserRepository userRepository;
	
	@PostMapping("/user")
   User  newUser(User newUser)
	{
		User user=userRepository.save(newUser);

		return user;
	}
	
	
	
	@GetMapping("/user")
	public ResponseEntity<List<User>> getAllusers(){
		
		List<User> user=userRepository.findAll();
	return new ResponseEntity<>(user, HttpStatus.OK);
	
	}
	
	
	@GetMapping("/user/{id}")
	public ResponseEntity<User> getUserById(@PathVariable Long id)
	{
		User user= userRepository.findById(id)
			.orElseThrow(()->new React.exception.UserNotFoundException(id));
			
			if(user!=null)
			{
				return new ResponseEntity<>(user,HttpStatus.OK);
			}
			else{
				return new ResponseEntity<>(user,HttpStatus.NOT_FOUND);
			}
	}

     @PutMapping("/user/{id}")
    User updateUser(User newUser, @PathVariable Long id)
{
	return userRepository.findById(id)
			.map(user -> {
				user.setUsername(newUser.getUsername());
				user.setName(newUser.getName());
				user.setEmail(newUser.getEmail());
				return userRepository.save(user);
			}).orElseThrow(()->new UserNotFoundException(id));
			}
	
     @DeleteMapping("/user/{id}")
     String deleteUser(@PathVariable Long id)
     {
    	 if(!userRepository.existsById(id))
    	 {
    		 throw new UserNotFoundException(id);
    	 }
    	 
    	 userRepository.deleteById(id);
    	 
    	 return "User with id"+id+"has been deleted success";
     }

}
